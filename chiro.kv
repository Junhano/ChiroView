#:import utils kivy.utils
#:include kv/homescreen.kv
#:include kv/secondscreen.kv
#:include kv/thirdscreen.kv
#:include kv/bugsetting.kv
#:include kv/bugsending.kv
#:include kv/help.kv
#:include kv/about.kv
#:include kv/contact.kv
#:include kv/generalsetting.kv
#:include kv/secondscreenb.kv
#:import languageDict1 languageDict.LanguageDict


	

<-MyButton@Button>:
	font_name: 'Font/NotoSansSC-Regular.otf'
	state_image: self.background_normal if self.state == 'normal' else self.background_down
	disabled_image: self.background_disabled_normal if self.state == 'normal' else self.background_disabled_down
	_scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
	canvas:
		Color:
			rgba: self.background_color
		BorderImage:
			border:self.border
			pos: self.pos
			size: self.size
			source: self.disabled_image if self.disabled else self.state_image
		PushMatrix
		Scale:
			origin: self.center
			x: self._scale or 1.
			y: self._scale or 1.
		Color:
			rgba: self.disabled_color if self.disabled else self.color
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center_x - self.texture_size[0] / 2.), int(self.center_y - self.texture_size[1] / 2.)
		PopMatrix
	
	

<-InvisbleButton@Button>:
	font_name: 'Font/NotoSansSC-Regular.otf'
	state_image: self.background_normal if self.state == 'normal' else self.background_down
	disabled_image: self.background_disabled_normal if self.state == 'normal' else self.background_disabled_down
	_scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
	canvas:
		Color:
			rgba: self.background_color
		PushMatrix
		Scale:
			origin: self.center
			x: self._scale or 1.
			y: self._scale or 1.
		Color:
			rgba: self.disabled_color if self.disabled else self.color
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center_x - self.texture_size[0] / 2.), int(self.center_y - self.texture_size[1] / 2.)
		PopMatrix


	
<MLabel>:
	font_name: 'Font/NotoSansSC-Regular.otf'



<NumberInputNew@MDTextField>:
	input_filter: 'int'

<LineContent>
	orientation: 'vertical'
	spacing: '12dp'
	height: '120dp'

	NumberInputNew:
		hint_text: languageDict1.langDict["VerticalLine"][app.state]
	NumberInputNew:
		hint_text: languageDict1.langDict["HorizontalLine"][app.state]


GridLayout:
	cols: 1
	ScreenManager:
		id: screen_manager
		HomeScreen:
			name: "home_screen"
			id: home_screen
		SecondScreen:
			name: "second_screen"
			id:second_screen
		ThirdScreen:
			name: "third_screen"
			id:third_screen
		BugSetting:
			name: "bug_setting"
			id:bug_setting
		BugSending:
			name: "bug_sending"
			id:bug_sending
		Help:
			name: "help"
			id:help
		About: 
			name: "about"
			id:about
		Contact:
			name: "contact"
			id:contact
		GeneralSetting:
			name: "general_setting"
			id: general_setting
		SecondScreenB:
			name: "second_screen_b"
			id: second_screen_b